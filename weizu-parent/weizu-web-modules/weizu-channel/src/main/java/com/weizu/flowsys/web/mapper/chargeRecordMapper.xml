<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.weizu.flowsys.web.agency.dao.ChargeRecordDaoInterface">

<sql id="t_agency">agency_backward</sql>
<sql id="t_record">charge_record</sql>
<sql id="t_ap">agency_purchase</sql>
<sql id="t_purchase">purchase</sql>

   <resultMap id="BaseResultMap" type="com.weizu.flowsys.web.agency.pojo.ChargeRecordPo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="remittance_time" jdbcType="BIGINT" property="remittanceTime" />
    <result column="recharge_amount" jdbcType="DOUBLE" property="rechargeAmount" />
    <result column="charge_before" jdbcType="DOUBLE" property="chargeBefore" />
    <result column="charge_after" jdbcType="DOUBLE" property="chargeAfter" />
    <result column="bill_type" jdbcType="INTEGER" property="billType" />
    <result column="account_type" jdbcType="INTEGER" property="accountType" />
    <result column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="agency_id" jdbcType="INTEGER" property="agencyId" />
    <result column="purchase_id" jdbcType="BIGINT" property="purchaseId" />
    <result column="charge_for" jdbcType="INTEGER" property="chargeFor" />
  </resultMap>
  <sql id="Base_Column_List">
    id, remittance_time, recharge_amount, charge_before, charge_after, bill_type, account_type, 
    account_id, agency_id,purchase_id, charge_for
  </sql>
  <sql id="BatchAdd_Column_List">
    remittance_time, recharge_amount, charge_before, charge_after, bill_type, account_type, 
    account_id, agency_id,purchase_id, charge_for
  </sql>
  
   <!-- 批量添加充值记录 -->
  <insert id="crt_addList" parameterType="java.util.List" useGeneratedKeys="true">
  	insert into <include refid="t_record"></include>
  	(<include refid="BatchAdd_Column_List"></include>)
  	values
  	<foreach collection="list" item="crt" index="index" separator=",">
  		(#{crt.remittanceTime},#{crt.rechargeAmount},#{crt.chargeBefore},#{crt.chargeAfter},#{crt.billType},
  		#{crt.accountType},#{crt.accountId},#{crt.agencyId},#{crt.purchaseId},#{crt.chargeFor})
  	</foreach>
  </insert>
  
   <resultMap id="OtherMap" type="com.weizu.flowsys.web.agency.pojo.ChargeRecordPo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="remittance_time" jdbcType="BIGINT" property="remittanceTime" />
    <result column="recharge_amount" jdbcType="DOUBLE" property="rechargeAmount" />
    <result column="charge_before" jdbcType="DOUBLE" property="chargeBefore" />
    <result column="charge_after" jdbcType="DOUBLE" property="chargeAfter" />
    <result column="bill_type" jdbcType="INTEGER" property="billType" />
    <result column="account_type" jdbcType="INTEGER" property="accountType" />
    <result column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="agency_id" jdbcType="INTEGER" property="agencyId" />
    <result column="purchase_id" jdbcType="BIGINT" property="purchaseId" />
    <result column="charge_for" jdbcType="INTEGER" property="chargeFor" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_real_name" jdbcType="VARCHAR" property="userRealName" />
  </resultMap>
  <sql id="other_Column_List">
    record.id, remittance_time, recharge_amount, charge_before, charge_after, bill_type, account_type, 
    account_id, agency_id, purchase_id, charge_for, user_name, user_real_name
  </sql>
  
  <!-- 消费记录 -->
   <resultMap id="ConsumeRecordMap" type="com.weizu.flowsys.web.agency.pojo.ConsumeRecordPo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="remittance_time" jdbcType="BIGINT" property="remittanceTime" />
    <result column="recharge_amount" jdbcType="DOUBLE" property="rechargeAmount" />
    <result column="charge_before" jdbcType="DOUBLE" property="chargeBefore" />
    <result column="charge_after" jdbcType="DOUBLE" property="chargeAfter" />
    <result column="bill_type" jdbcType="INTEGER" property="billType" />
    <result column="account_type" jdbcType="INTEGER" property="accountType" />
    <result column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="agency_id" jdbcType="INTEGER" property="agencyId" />
    <result column="charge_for" jdbcType="INTEGER" property="chargeFor" />
    <result column="purchase_id" jdbcType="BIGINT" property="purchaseId" />
    <result column="user_name" property="userName" />
    <result column="charge_tel" property="chargeTel" />
  </resultMap>
  <sql id="Consume_Column_List">
    crt.*,pc.charge_tel,agb.user_name
  </sql>
  
  <!-- 查询充值列表 -->
  <select id="selectChargeList" parameterType="com.weizu.flowsys.web.agency.pojo.ChargeRecordPo" resultMap="OtherMap">
  	select <include refid="other_Column_List"></include> 
  	from <include refid="t_agency"></include> agency
  	inner join <include refid="t_record"></include> record
  	on record.agency_id = agency.id
  	<where>
  		<include refid="condition_sql"></include>
  	</where>
  	order by remittance_time desc 
  	<!-- order by -->
  		<if test="start != null">
   		 	limit #{start}
   		 </if>
  		<if test="end != null">
   		 	, #{end}
   		 </if>
   		 <if test="start == null &amp; end == null">
   		 	limit 0,10
   		 </if> 
  </select>
  <select id="countRecord" parameterType="com.weizu.flowsys.web.agency.pojo.ChargeRecordPo" resultType="int">
  	select count(*)
  	from <include refid="t_agency"></include> agency
  	inner join <include refid="t_record"></include> record
  	on record.agency_id = agency.id
  	<where>
  		<include refid="condition_sql"></include>
  	</where>
  </select>
  <!-- 查询where语句块 -->
	<sql id="condition_sql">
		<if test="userName != null">
			AND user_name LIKE CONCAT('%', TRIM(#{userName}), '%')
		</if>
		<if test="accountType != null">
			AND account_type = #{accountType}
		</if>
		<if test="accountId != null">
			AND record.account_id = #{accountId}
		</if>
		<if test="agencyId != null">
			AND agency_id = #{agencyId}
		</if>
		<if test="contextAgencyId != null">
			AND (agency.id = #{contextAgencyId} OR agency.root_agency_id = #{contextAgencyId})
		</if>
		
		<if test="startTime != null">
			AND remittance_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			AND remittance_time &lt;= #{endTime}
		</if>
	</sql>
	<!-- 查询消费列表 -->
  <select id="countConsume" parameterType="map" resultType="int">	
  	select count(*) 
  	from <include refid="t_record"></include> crt
  	inner join <include refid="t_purchase"></include> pc
  	on pc.order_id = crt.purchase_id
	INNER join <include refid="t_agency"></include> agb
	on crt.agency_id = agb.id
	<where>
		<include refid="consume_condition_sql"></include>
	</where>
  </select>
  <select id="getConsume" parameterType="map" resultMap="ConsumeRecordMap">	
  	select <include refid="Consume_Column_List"></include>
  	from <include refid="t_record"></include> crt
  	inner join <include refid="t_purchase"></include> pc
  	on pc.order_id = crt.purchase_id
	INNER join <include refid="t_agency"></include> agb
	on crt.agency_id = agb.id
	<where>
		<include refid="consume_condition_sql"></include>
	</where>
	order by crt.remittance_time desc, crt.charge_after
  	<!-- order by -->
	<if test="start != null">
		 	limit #{start}
		 </if>
	<if test="end != null">
	 	, #{end}
	 </if>
	 <if test="start == null &amp; end == null">
	 	limit 0,10
	 </if> 
  </select>
  <sql id="consume_condition_sql">
		<!-- <if test="agencyId != null">
			AND agb.id = #{agencyId}
		</if>
		<if test="agencyId == null &amp; contextAgencyId != null">
			AND (agb.id = #{contextAgencyId} OR agb.root_agency_id = #{contextAgencyId})
		</if> -->
		<choose>
			<when test="agencyId != null">AND agb.id = #{agencyId}</when>
			<when test="agencyId == null &amp; contextAgencyId != null">
				<!-- 获得当前登录用户的记录和登录用户的子代理商的记录 -->
				AND (agb.id = #{contextAgencyId} OR agb.root_agency_id = #{contextAgencyId})
			</when>
		</choose>
		AND (account_type = 1 or account_type = 2)
		<if test="userName != null">
			AND user_name LIKE CONCAT('%', TRIM(#{userName}), '%')
		</if>
		<if test="accountType != null">
			AND account_type = #{accountType}
		</if>
		
		<if test="startTime != null">
			AND crt.remittance_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			AND crt.remittance_time &lt;= #{endTime}
		</if>
		<if test="chargeTel != null">
			AND pc.charge_tel LIKE CONCAT('%', TRIM(#{chargeTel}), '%')
		</if>
	</sql>
</mapper>